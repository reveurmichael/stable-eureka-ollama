def compute_reward(self, pos, action, state):
    hull_angle = state[0]
    vel_x = state[2]
    vel_y = state[3]
    
    # Reward for moving forward and avoiding falling down
    forward_reward = np.exp(np.tanh(vel_x * 10)) if vel_x > 0.1 else 0
    
    # Penalties for falling or getting stuck
    fall_penalty = -100 if pos[0] < 0 else 0
    stuck_penalty = -5 if np.all([l.fraction < 0.01 for l in self.lidar]) else 0
    
    reward = forward_reward + fall_penalty + stuck_penalty
    individual_reward = {'forward': forward_reward, 'fall': fall_penalty, 'stuck': stuck_penalty}
    
    return reward, individual_reward