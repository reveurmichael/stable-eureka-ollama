```python
def compute_reward(self, pos, action, state):
    distance_to_goal = abs(pos[0] - TERRAIN_LENGTH)
    velocity = (state[3] + state[4]) / 2.0
    
    # Punish for falling or getting stuck
    if state[1] > 0.5:
        reward = -10.0
    elif action[0] == 0 and action[1] == 0 and action[2] == 0 and action[3] == 0:  # Agent is idle
        reward = -5.0
    
    # Reward for forward movement
    else:
        reward = np.exp(-distance_to_goal / TERRAIN_LENGTH) * velocity
    
    return reward, {'movement': reward}
```

This reward function provides a positive reward for the agent's progress towards the goal and its forward movement. The agent receives a high reward when it is close to the goal and moving forward quickly. As the agent moves further away from the goal or becomes idle, the reward decreases. Additionally, if the agent falls or gets stuck, it receives a negative reward, encouraging it to avoid such states.