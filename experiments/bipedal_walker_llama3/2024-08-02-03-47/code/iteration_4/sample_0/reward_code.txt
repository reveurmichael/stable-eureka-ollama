def compute_reward(self, pos, action, state):
    progress = (pos[0] / TERRAIN_LENGTH) - (TERRAIN_GRASS * TERRAIN_STEP / TERRAIN_LENGTH)
    fall_penalty = max(0, self.hull.linearVelocity.y)  # punish for falling down
    stuck_penalty = min(1, sum(l.fraction for l in self.lidar))  # encourage exploration
    speed_reward = np.clip(action[2], -1, 1) * 10  # reward for moving forward

    reward = np.exp((progress + speed_reward - fall_penalty - stuck_penalty) / 5)
    individual_reward = {'progress': progress, 'fall_penalty': fall_penalty, 'stuck_penalty': stuck_penalty, 'speed_reward': speed_reward}
    return reward, individual_reward