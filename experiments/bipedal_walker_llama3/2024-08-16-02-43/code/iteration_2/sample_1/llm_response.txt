```python
def compute_reward(self, pos, action, state):
    done = abs(pos[0] - TERRAIN_LENGTH) < 1e-3
    total_reward = 0.0
    
    if not done:
        # Reward for moving forward (faster is better)
        total_reward += np.exp((TERRAIN_LENGTH - pos[0]) / 100.0) * (1 - state[2] ** 2) + (state[3] ** 2)
        
        # Penalty for falling down
        if not self.hull.linearVelocity[1]:
            total_reward -= 10.0
        
    else:
        total_reward += np.exp((TERRAIN_LENGTH - pos[0]) / 100.0) * (1 - state[2] ** 2) + (state[3] ** 2)
    
    individual_reward = {'progress': np.exp((TERRAIN_LENGTH - pos[0]) / 100.0), 
                          'balance': 1 - state[2] ** 2, 
                          'speed': 1 - state[3] ** 2,
                          'penalty': 10 if not self.hull.linearVelocity[1] else 0}
    
    return total_reward, individual_reward
```