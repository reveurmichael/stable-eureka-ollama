def compute_reward(self, pos, action, state):
    hull_angle = state[0]
    vel_x = state[2]
    terminal = (pos[0] < 0) or self.game_over

    if terminal:
        reward = -1.0
        individual_reward = {"fall": -1.0}
    else:
        # Encourage forward movement
        movement_reward = np.exp((pos[0] + VIEWPORT_W / SCALE / 5) / TERRAIN_LENGTH) * 2.0  # scaled up to encourage exploration
        # Punish falling or getting stuck
        fall_penalty = max(-np.sin(hull_angle), 0)  # re-write the fall penalty using sin() for a more nuanced penalty
        reward = movement_reward - fall_penalty
        individual_reward = {"movement": movement_reward, "fall": fall_penalty}

    return reward, individual_reward