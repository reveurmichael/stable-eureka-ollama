```python
def compute_reward(self, pos, action, state):
    hull_angle = state[0]
    x_velocity = state[2]

    # Reward for reaching the end of the terrain
    end_reached = (pos[0] > (TERRAIN_LENGTH - TERRAIN_GRASS) * TERRAIN_STEP)
    end_reward = 10.0 if end_reached else 0.0

    # Penalty for falling down or getting stuck
    penalty = 5.0 if self.game_over or hull_angle > math.radians(30) else 0.0

    # Reward for moving forward
    movement_reward = 2.0 * x_velocity

    # Smoothness reward (penalty for high velocity)
    smoothness_penalty = -1.0 * np.clip(np.abs(x_velocity), 0, 5)

    # Total reward and individual components
    total_reward = end_reward + penalty + movement_reward + smoothness_penalty
    individual_reward = {'end_reached': end_reward, 'penalty': penalty, 'movement': movement_reward, 'smoothness': smoothness_penalty}

    return total_reward, individual_reward