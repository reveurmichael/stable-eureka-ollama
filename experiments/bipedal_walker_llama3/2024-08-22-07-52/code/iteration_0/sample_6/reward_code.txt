def compute_reward(self, pos, action, state):
    # Distance-based reward: incentivizing movement to the right
    distance_reward = (pos.x / TERRAIN_LENGTH) - np.exp(-(pos.x / 400.0))
    
    # Stability reward: penalizing large angle and angular velocity
    angle_penalty = -np.abs(state[0])
    angle_penalty = np.tanh(angle_penalty / 0.5)
    
    angular_velocity_penalty = -np.abs(state[1])
    angular_velocity_penalty = np.tanh(angular_velocity_penalty / 0.5)
    
    # Smoothness reward: penalizing high-speed actions
    action_penalty = -np.sum(np.abs(action)) / len(action)
    action_penalty = np.tanh(action_penalty / 0.5)
    
    # Total reward: a weighted sum with adjusted weights
    reward = (distance_reward
              + 0.2 * angle_penalty
              + 0.1 * angular_velocity_penalty
              + 0.4 * action_penalty)  # Higher weight given to distance reward and action penalty
    
    individual_reward = {
        "distance_reward": distance_reward,
        "angle_penalty": angle_penalty,
        "angular_velocity_penalty": angular_velocity_penalty,
        "action_penalty": action_penalty,
    }
    
    return reward, individual_reward