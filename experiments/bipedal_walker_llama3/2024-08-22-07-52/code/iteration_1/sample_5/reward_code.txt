def compute_reward(self, pos, action, state):
    # Distance-based reward: incentivizing movement to the right
    distance_reward = pos.x
    
    # Stability and smoothness rewards:
    stability_penalty = -np.abs(state[0]) * 0.1
    smoothness_penalty = -np.sum(np.abs(action)) / len(action) * 0.05
    
    # Proximity to Lidar points: encouraging avoidance of obstacles
    obstacle_penalty = -np.min([l.fraction for l in self.lidar])
    
    # Total reward: a weighted sum with adjusted weights
    reward = (distance_reward
              + 0.3 * stability_penalty
              + 0.2 * smoothness_penalty
              + 0.5 * obstacle_penalty)
    
    individual_reward = {
        "distance_reward": distance_reward,
        "stability_penalty": stability_penalty,
        "smoothness_penalty": smoothness_penalty,
        "obstacle_penalty": obstacle_penalty
    }
    
    return reward, individual_reward