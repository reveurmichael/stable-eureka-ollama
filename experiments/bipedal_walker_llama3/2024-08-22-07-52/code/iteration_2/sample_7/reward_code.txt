def compute_reward(self, pos, action, state):
    # Fitness score: maximize this during training
    fitness_reward = np.min(fitness_score) * 0.5
    
    # Obstacle penalty (rescaled)
    obstacle_penalty = -np.min(obstacle_penalty) / -71.5706919163467 * 0.2
    
    # Distance-based reward: incentivizing movement to the right (scaled)
    distance_reward = pos.x / 200.0
    
    # Stability rewards: penalizing large angle and angular velocity (reduced magnitude)
    angle_penalty = -np.abs(state[0]) * 0.05
    angular_velocity_penalty = -np.abs(state[1]) * 0.01
    
    # Smoothness reward: penalizing high-speed actions (scaled)
    action_penalty = -np.sum(np.abs(action)) / len(action) * 0.1
    
    # Total reward: a weighted sum with adjusted weights
    reward = (fitness_reward + distance_reward + angle_penalty + angular_velocity_penalty + action_penalty + obstacle_penalty)
    
    individual_reward = {
        "distance_reward": distance_reward,
        "angle_penalty": angle_penalty,
        "angular_velocity_penalty": angular_velocity_penalty,
        "action_penalty": action_penalty,
        "obstacle_penalty": obstacle_penalty
    }
    
    return reward, individual_reward