def compute_reward(self, pos, action, state):
    # Distance-based reward: incentivizing movement to the right (scaled)
    distance_reward = pos.x / 200.0
    
    # Stability reward: penalizing large stability deviations (adjusted metric)
    stability_penalty = -np.abs(state[0] - state[-1]) * 0.01
    
    # Smoothness reward: penalizing high-speed actions (increased magnitude)
    action_penalty = -np.sum(np.abs(action)) / len(action) * 0.2
    
    # Proximity to Lidar points: encouraging avoidance of obstacles
    obstacle_penalty = -np.min([l.fraction for l in self.lidar]) * 1.0
    
    # Total reward: a weighted sum with adjusted weights
    reward = (distance_reward
              + 0.3 * stability_penalty
              + 0.2 * action_penalty
              + 0.5 * obstacle_penalty)  # Higher weight given to distance reward and obstacle penalty
    
    individual_reward = {
        "distance_reward": distance_reward,
        "stability_penalty": stability_penalty,
        "action_penalty": action_penalty,
        "obstacle_penalty": obstacle_penalty
    }
    
    return reward, individual_reward