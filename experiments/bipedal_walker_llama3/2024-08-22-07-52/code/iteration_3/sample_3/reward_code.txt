def compute_reward(self, pos, action, state):
    # Distance-based reward: incentivizing movement to the right (scaled)
    distance_reward = pos.x / 500.0
    
    # Stability reward: penalizing large angle and angular velocity (reduced magnitude)
    angle_penalty = -np.abs(state[0]) * 0.001
    angular_velocity_penalty = -np.abs(state[1]) * 0.0005
    
    # Smoothness reward: penalizing high-speed actions (scaled)
    action_penalty = -np.sum(np.abs(action)) / len(action) * 0.02
    
    # Proximity to Lidar points: encouraging avoidance of obstacles
    obstacle_penalty = -np.min([l.fraction for l in self.lidar]) * 1.5
    
    # Fitness score reward: aligning the total reward with the fitness score
    fitness_reward = np.exp(-(fitness_score / 1000.0))
    
    # Total reward: a weighted sum with adjusted weights
    reward = (distance_reward
              + 0.2 * angle_penalty
              + 0.1 * angular_velocity_penalty
              + 0.05 * action_penalty
              + 0.7 * obstacle_penalty
              + fitness_reward)  # Higher weight given to distance reward and obstacle penalty
    
    individual_reward = {
        "distance_reward": distance_reward,
        "angle_penalty": angle_penalty,
        "angular_velocity_penalty": angular_velocity_penalty,
        "action_penalty": action_penalty,
        "obstacle_penalty": obstacle_penalty,
        "fitness_reward": fitness_reward
    }
    
    return reward, individual_reward