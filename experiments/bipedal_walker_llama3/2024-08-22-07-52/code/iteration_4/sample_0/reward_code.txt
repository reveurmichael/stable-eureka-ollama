def compute_reward(self, pos, action, state):
    # Distance-based reward: incentivizing movement to the right (scaled)
    distance_reward = pos.x / 200.0 * 10
    
    # Stability reward: penalizing large angle and angular velocity (reduced magnitude)
    angle_penalty = -np.abs(state[0]) * 0.002
    angular_velocity_penalty = -np.abs(state[1]) * 0.0015
    
    # Smoothness reward: penalizing high-speed actions (scaled)
    action_penalty = -np.sum(np.abs(action)) / len(action) * 0.02
    
    # Obstacle penalty: increasing negative reward for obstacle proximity
    obstacle_penalty = -np.min([l.fraction for l in self.lidar]) * 0.5
    
    # Fitness score reward: incentivizing maximizing the fitness score
    fitness_reward = np.exp(self.fitness_score / 100.0) * 10
    
    # Total reward: a weighted sum with adjusted weights
    reward = (distance_reward * 0.2
              + angle_penalty * 0.05
              + angular_velocity_penalty * 0.05
              + action_penalty * 0.02
              + obstacle_penalty * 0.3
              + fitness_reward * 0.4)
    
    individual_rewards = {
        "distance_reward": distance_reward,
        "angle_penalty": angle_penalty,
        "angular_velocity_penalty": angular_velocity_penalty,
        "action_penalty": action_penalty,
        "obstacle_penalty": obstacle_penalty,
        "fitness_reward": fitness_reward
    }
    
    return reward, individual_rewards