def compute_reward(self, pos, action, state):
    # Distance-based reward: incentivizing movement to the right (scaled)
    distance_reward = pos.x / 200.0 * 10
    
    # Stability reward: penalizing large angle and angular velocity (reduced magnitude)
    angle_penalty = -np.abs(state[0]) * 0.005
    angular_velocity_penalty = -np.abs(state[1]) * 0.0025
    
    # Smoothness reward: penalizing high-speed actions (scaled)
    action_penalty = -np.sum(np.abs(action)) / len(action) * 0.02
    
    # Proximity to Lidar points: encouraging avoidance of obstacles
    obstacle_reward = -np.min([l.fraction for l in self.lidar]) * 0.05
    
    # Fitness score reward: incentivizing high fitness scores
    fitness_reward = np.clip(state[2], 0, 1) * 10
    
    # Total reward: a weighted sum with adjusted weights
    reward = (distance_reward * 0.3
              + angle_penalty * 0.05
              + angular_velocity_penalty * 0.05
              + action_penalty * 0.05
              + obstacle_reward * 0.1
              + fitness_reward * 0.2)
    
    individual_reward = {
        "distance_reward": distance_reward,
        "angle_penalty": angle_penalty,
        "angular_velocity_penalty": angular_velocity_penalty,
        "action_penalty": action_penalty,
        "obstacle_reward": obstacle_reward,
        "fitness_reward": fitness_reward
    }
    
    return reward, individual_reward