def compute_reward(self, pos, action, state):
    # Distance-based reward: incentivizing movement to the right
    distance_reward = pos.x / 400.0
    distance_reward = np.exp(distance_reward) - 1
    
    # Stability reward: penalizing large angle and angular velocity
    angle_penalty = -np.abs(state[0])
    angle_penalty = np.tanh(angle_penalty * 2.5)
    
    angular_velocity_penalty = -np.abs(state[1]) * 0.8
    angular_velocity_penalty = np.tanh(angular_velocity_penalty) * 1.5
    
    # Smoothness reward: penalizing high-speed actions
    action_penalty = -np.sum(np.abs(action)) / len(action)
    action_penalty = np.tanh(action_penalty * 3.2)
    
    # Proximity to Lidar points: encouraging avoidance of obstacles
    obstacle_penalty = -min([l.fraction for l in self.lidar]) * 0.6
    obstacle_penalty = np.exp(obstacle_penalty) * 1.7
    
    # Total reward: a weighted sum with adjusted weights
    reward = (distance_reward
              + 0.15 * angle_penalty
              + 0.2 * angular_velocity_penalty
              + 0.3 * action_penalty
              + 0.8 * obstacle_penalty)  # Higher weight given to distance and obstacle penalty
    
    individual_reward = {
        "distance_reward": distance_reward,
        "angle_penalty": angle_penalty,
        "angular_velocity_penalty": angular_velocity_penalty,
        "action_penalty": action_penalty,
        "obstacle_penalty": obstacle_penalty,
    }
    
    return reward, individual_reward