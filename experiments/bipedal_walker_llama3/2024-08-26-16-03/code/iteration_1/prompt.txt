You are a reward engineer writing effective reward functions for reinforcement learning tasks. Your goal is to create a reward function to help the agent learn the task described in text. Use relevant environment variables as inputs. Example signature:
```python
def compute_reward(self, ...):
    ...
    return reward, {}
```
Do not use type hints. Return type: float, Dict[str, float].
Coding instructions: The reward function output should include:
1. Total reward (float)
2. Dictionary of individual reward components
Format as a Python code string: "```python ... ```". Tips:
1. Normalize rewards using transformations like np.exp. Introduce temperature parameters for each transformation.
2. Ensure input types match expected types.
3. Use only self. attributes from the environment class definition and input variables.
4. If you create a self var inside the compute_reward function you must consider that it is not previously defined in the environment class:
    e.g. if hasattr(self, 'var') is False: self.var = 0 else self.var += 1
5. No new input variables.
6. The python code must begin with: "```python ... ```"
7. Pass self as the first argument.
8. Do not compute fitness_score components.
9. Only create the reward function, do not create more functions.
10. Try to make everything smooth (when possible).
Provide the function code only, followed by a brief explanation (max 50 words).
Task description: The goal is to make a biped navigate a 2D environment:
- The biped starts standing at the left end of the terrain with the hull horizontal, and both legs in the same position with a slight knee angle
- The biped has to reach the right end of the terrain and avoid falling down, getting stuck while surpassing obstacles (e.g. gaps, steps, stairs)
- We do not want the biped to get stuck in a certain position, he should keep moving forward, as far as possible
- The biped should go as fast as possible, so it gets to the end in less steps. The fewer episode steps, the better if getting to the end
- It is more important to reach the end than being super smooth, because the agent could decide not to move to avoid falling down, which is not the goal
Environment code:
def step(self, action: np.ndarray):
    assert self.hull is not None

    # self.hull.ApplyForceToCenter((0, 20), True) -- Uncomment this to receive a bit of stability help
    control_speed = False  # Should be easier as well
    if control_speed:
        self.joints[0].motorSpeed = float(SPEED_HIP * np.clip(action[0], -1, 1))
        self.joints[1].motorSpeed = float(SPEED_KNEE * np.clip(action[1], -1, 1))
        self.joints[2].motorSpeed = float(SPEED_HIP * np.clip(action[2], -1, 1))
        self.joints[3].motorSpeed = float(SPEED_KNEE * np.clip(action[3], -1, 1))
    else:
        self.joints[0].motorSpeed = float(SPEED_HIP * np.sign(action[0]))
        self.joints[0].maxMotorTorque = float(
            MOTORS_TORQUE * np.clip(np.abs(action[0]), 0, 1)
        )
        self.joints[1].motorSpeed = float(SPEED_KNEE * np.sign(action[1]))
        self.joints[1].maxMotorTorque = float(
            MOTORS_TORQUE * np.clip(np.abs(action[1]), 0, 1)
        )
        self.joints[2].motorSpeed = float(SPEED_HIP * np.sign(action[2]))
        self.joints[2].maxMotorTorque = float(
            MOTORS_TORQUE * np.clip(np.abs(action[2]), 0, 1)
        )
        self.joints[3].motorSpeed = float(SPEED_KNEE * np.sign(action[3]))
        self.joints[3].maxMotorTorque = float(
            MOTORS_TORQUE * np.clip(np.abs(action[3]), 0, 1)
        )

    self.world.Step(1.0 / FPS, 6 * 30, 2 * 30)

    pos = self.hull.position
    vel = self.hull.linearVelocity

    for i in range(10):
        self.lidar[i].fraction = 1.0
        self.lidar[i].p1 = pos
        self.lidar[i].p2 = (
            pos[0] + math.sin(1.5 * i / 10.0) * LIDAR_RANGE,
            pos[1] - math.cos(1.5 * i / 10.0) * LIDAR_RANGE,
        )
        self.world.RayCast(self.lidar[i], self.lidar[i].p1, self.lidar[i].p2)

    state = [
        self.hull.angle,  # Normal angles up to 0.5 here, but sure more is possible.
        2.0 * self.hull.angularVelocity / FPS,
        0.3 * vel.x * (VIEWPORT_W / SCALE) / FPS,  # Normalized to get -1..1 range
        0.3 * vel.y * (VIEWPORT_H / SCALE) / FPS,
        self.joints[0].angle,
        # This will give 1.1 on high up, but it's still OK (and there should be spikes on hiting the ground, that's normal too)
        self.joints[0].speed / SPEED_HIP,
        self.joints[1].angle + 1.0,
        self.joints[1].speed / SPEED_KNEE,
        1.0 if self.legs[1].ground_contact else 0.0,
        self.joints[2].angle,
        self.joints[2].speed / SPEED_HIP,
        self.joints[3].angle + 1.0,
        self.joints[3].speed / SPEED_KNEE,
        1.0 if self.legs[3].ground_contact else 0.0,
    ]
    state += [l.fraction for l in self.lidar]
    assert len(state) == 24

    self.scroll = pos.x - VIEWPORT_W / SCALE / 5

    terminated = False
    if self.game_over or pos[0] < 0:
        terminated = True
    # stable-eureka: this is the function you must implement!
    reward, individual_reward = self.compute_reward(pos, action, state)

    fitness_score = self.compute_fitness_score(pos, action, state)

    if pos[0] > (TERRAIN_LENGTH - TERRAIN_GRASS) * TERRAIN_STEP:
        terminated = True

    if self.render_mode == "human":
        self.render()

    info = individual_reward.update({'fitness_score': fitness_score})

    return np.array(state, dtype=np.float32), reward, terminated, False, info

Reward reflection:
We trained a RL policy using the provided reward function code and tracked (on evaluation on several points of the training stage) the values of individual reward components, along with global policy metrics such as fitness scores and episode lengths. Maximum, mean, and minimum are provided:
   distance_reward: [19.132274686570625, 20.63021720254173, 18.679268373359577, 18.101757644023767, 18.54743063226906, 18.655280026640224, 18.536145370372815, 18.302980833822275, 18.40886397051407, 18.462801115809622]. Max: 20.63021720254173 - Mean: 18.745701985592376 - Min: 18.101757644023767 
   angle_penalty: [-220.75911604623792, -229.27710101882258, -217.92365937895804, -220.24194661355423, -218.6688549545271, -217.7648369659314, -217.62505205335836, -208.12969029057848, -206.68716037403817, -211.57472363984834]. Max: -206.68716037403817 - Mean: -216.86521413358545 - Min: -229.27710101882258 
   angular_velocity_penalty: [-1.501779414891139, -3.0699715690428397, -0.4916291644134747, -1.3699577795130948, -0.9929014752924529, -0.6973719142237862, -0.8589367344885125, -1.1210738069659403, -1.0347885922949245, -1.1750373938872953]. Max: -0.4916291644134747 - Mean: -1.231344784501346 - Min: -3.0699715690428397 
   action_penalty: [-441.2342797407573, -251.4936996376594, -161.3859140066275, -70.10038717590392, -39.94578797581562, -24.20567785911082, -18.159986498594684, -155.63289295819357, -27.309454351305984, -37.72571107530281]. Max: -18.159986498594684 - Mean: -122.71937912792714 - Min: -441.2342797407573 
   obstacle_penalty: [1285.3379952640034, 1284.294516047243, 1285.5124450087155, 1285.4793150585394, 1285.51490527435, 1285.6645477368315, 1285.7246664508266, 1283.678537597968, 1283.7901042003532, 1284.571920788288]. Max: 1285.7246664508266 - Mean: 1284.956895342712 - Min: 1283.678537597968 
   fitness_score: [-25.39258278607531, -14.302057949230633, -9.258427530825161, -4.0472217532973636, -2.3417412916335243, -1.4026559018420581, -1.1007857425044199, -8.870285040585424, -1.6539709269767544, -2.226088610087596]. Max: -1.1007857425044199 - Mean: -7.059581753305824 - Min: -25.39258278607531 
   reward: [507.2048996016383, 564.0946511700749, 591.1781967114657, 617.6501210406423, 627.354971844703, 632.3796396702528, 634.1020731627941, 592.5273026041687, 631.3388975001872, 628.156063079834]. Max: 634.1020731627941 - Mean: 602.5986816385761 - Min: 507.2048996016383 
   episode_length: [1600.0, 1600.0, 1600.0, 1600.0, 1600.0, 1600.0, 1600.0, 1600.0, 1600.0, 1600.0]. Max: 1600.0 - Mean: 1600.0 - Min: 1600.0 

Please analyze the policy feedback and provide an improved reward function to better solve the task. Tips for analyzing feedback:
1. If a reward component's values are nearly identical, or it increases when it should decrease (minimize) and vice versa, consider the following options:
    a. Change its scale or temperature parameter.
    b. Re-write the component.
    c. Discard the component.
2. If a component's magnitude is significantly larger, re-scale it.
3. You want to maximize the fitness score as it is the ground truth evaluator.
4. You want to maximize positive reward components values during training and minimize negative reward components values.
5. If the fitness score is not improving during training, try to change the reward function.
Analyze each existing reward component first, then write the new reward function code proposal.Stable-Eureka best iteration  (you should modify it!): 
    # Generated code by stable-eureka
    def compute_reward(self, pos, action, state):
        # Distance-based reward: incentivizing movement to the right
        distance_reward = np.exp(pos.x / 400.0) - 1
    
        # Stability reward: penalizing large angle and angular velocity
        angle_penalty = -np.abs(state[0])
        angle_penalty = np.tanh(angle_penalty / 0.5)
    
        angular_velocity_penalty = -np.abs(state[1])
        angular_velocity_penalty = np.tanh(angular_velocity_penalty / 0.5)
    
        # Smoothness reward: penalizing high-speed actions
        action_penalty = -np.sum(np.abs(action)) / len(action)
        action_penalty = np.tanh(action_penalty / 0.5)
    
        # Proximity to Lidar points: encouraging avoidance of obstacles
        obstacle_penalty = -np.min([l.fraction for l in self.lidar])
        obstacle_penalty = np.exp(obstacle_penalty)  # Exponential scaling for higher penalty
    
        # Total reward: a weighted sum with adjusted weights
        reward = (distance_reward
                  + 0.1 * angle_penalty
                  + 0.1 * angular_velocity_penalty
                  + 0.3 * action_penalty
                  + 0.5 * obstacle_penalty)  # Higher weight given to obstacle penalty and action penalty
    
        individual_reward = {
            "distance_reward": distance_reward,
            "angle_penalty": angle_penalty,
            "angular_velocity_penalty": angular_velocity_penalty,
            "action_penalty": action_penalty,
            "obstacle_penalty": obstacle_penalty,
        }
    
        return reward, individual_reward

Your reward code is: 