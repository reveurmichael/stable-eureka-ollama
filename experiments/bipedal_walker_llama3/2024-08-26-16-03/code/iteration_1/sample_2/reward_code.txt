def compute_reward(self, pos, action, state):
    # Distance-based reward: incentivizing movement to the right (scaled)
    distance_reward = np.tanh(pos.x / 200.0)  # Reduce scaling factor

    # Stability reward: penalizing large angle and angular velocity (simplified)
    stability_penalty = -np.abs(state[0] + state[1])  # Combine both components

    # Smoothness reward: penalizing high-speed actions (scaled)
    action_penalty = np.tanh(-np.sum(np.abs(action)) / len(action) * 2.0)

    # Proximity to Lidar points: encouraging avoidance of obstacles
    obstacle_penalty = -np.min([l.fraction for l in self.lidar])

    # Total reward: a weighted sum with adjusted weights
    reward = (distance_reward + 0.25 * stability_penalty + 0.5 * action_penalty + 0.75 * obstacle_penalty)

    individual_reward = {
        "distance_reward": distance_reward,
        "stability_penalty": stability_penalty,
        "action_penalty": action_penalty,
        "obstacle_penalty": obstacle_penalty,
    }

    return reward, individual_reward