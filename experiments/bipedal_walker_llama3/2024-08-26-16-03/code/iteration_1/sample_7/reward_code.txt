def compute_reward(self, pos, action, state):
    # Distance-based reward: incentivize movement to the right with moderate magnitude
    distance_reward = np.tanh(pos.x / 100.0)  # Tanh activation for bounded rewards

    # Simplified stability reward: reduce penalty for small angles and velocities
    angle_stability_penalty = -np.abs(state[0]) ** 2
    angular_velocity_stability_penalty = -np.abs(state[1]) ** 2
    stability_reward = np.mean([angle_stability_penalty, angular_velocity_stability_penalty])

    # Smoothness reward: moderate penalty for high-speed actions
    action_smoothness_penalty = -np.sum(np.abs(action)) / len(action)
    smoothness_reward = np.tanh(action_smoothness_penalty / 0.5)

    # Proximity to Lidar points: encourage avoidance of obstacles with moderate magnitude
    obstacle_avoidance_reward = -np.min([l.fraction for l in self.lidar])
    obstacle_avoidance_reward = np.exp(obstacle_avoidance_reward)  # Exponential scaling for higher penalty

    # Total reward: a weighted sum with adjusted weights
    reward = (distance_reward * 0.3
              + stability_reward * 0.2
              + smoothness_reward * 0.1
              + obstacle_avoidance_reward * 0.4)
    
    individual_reward = {
        "distance_reward": distance_reward,
        "stability_reward": stability_reward,
        "smoothness_reward": smoothness_reward,
        "obstacle_avoidance_reward": obstacle_avoidance_reward,
    }
    
    return reward, individual_reward