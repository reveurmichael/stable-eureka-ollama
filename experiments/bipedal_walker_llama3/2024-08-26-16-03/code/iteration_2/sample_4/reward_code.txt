def compute_reward(self, pos, action, state):
    # Distance-based reward: moderate incentive for movement towards the right
    distance_reward = np.tanh(pos.x / 50.0)  # Reduced magnitude

    # Simplified stability reward: reduce penalty for small angles and velocities
    angle_stability_penalty = -np.abs(state[0])  # Linear penalty instead of squared
    angular_velocity_stability_penalty = -np.abs(state[1])
    stability_reward = np.mean([angle_stability_penalty, angular_velocity_stability_penalty])

    # Smoothness reward: moderate incentive for smooth actions
    action_smoothness_incentive = np.sum(np.abs(action)) / len(action)  # Inverse of penalty
    smoothness_reward = np.tanh(action_smoothness_incentive / 0.1)

    # Obstacle avoidance reward: reduced exponential scaling and a more realistic distance metric
    obstacle_distance = np.mean([l.distance for l in self.lidar])  # Mean distance to all lidar points
    obstacle_avoidance_reward = -np.exp(-obstacle_distance / 10.0)  # Reduced penalty

    # Total reward: weighted sum with adjusted weights
    reward = (distance_reward * 0.2
              + stability_reward * 0.3
              + smoothness_reward * 0.1
              + obstacle_avoidance_reward * 0.4)
    
    individual_reward = {
        "distance_reward": distance_reward,
        "stability_reward": stability_reward,
        "smoothness_reward": smoothness_reward,
        "obstacle_avoidance_reward": obstacle_avoidance_reward,
    }
    
    return reward, individual_reward