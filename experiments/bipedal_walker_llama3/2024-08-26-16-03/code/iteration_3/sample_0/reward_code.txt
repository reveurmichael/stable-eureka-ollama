def compute_reward(self, pos, action, state):
    # Distance-based reward: incentivize movement to the right with moderate magnitude
    distance_reward = np.tanh(pos.x / 100.0)

    # Simplified stability reward: reduce penalty for small angles and velocities (scaled)
    angle_stability_penalty = -np.abs(state[0]) ** 2 * 0.5  # Increased penalty
    angular_velocity_stability_penalty = -np.abs(state[1]) ** 2 * 0.25  # Reduced penalty
    stability_reward = np.mean([angle_stability_penalty, angular_velocity_stability_penalty])

    # Smoothness reward: moderate penalty for high-speed actions (scaled)
    action_smoothness_penalty = -np.sum(np.abs(action)) / len(action) * 0.3  # Scaled penalty
    smoothness_reward = np.tanh(action_smoothness_penalty)

    # Obstacle avoidance reward: encourage avoidance of obstacles with negative magnitude and noise
    obstacle_avoidance_reward = -np.clip(np.min([l.fraction for l in self.lidar]) + np.random.normal(0, 0.1), -1, 0)  # Added noise

    # Fitness score: scaled up to match other components' magnitudes
    fitness_score = 10 * (fitness_score_value - 20)

    # Total reward: a weighted sum with adjusted weights
    reward = (distance_reward * 0.2
              + stability_reward * 0.15
              + smoothness_reward * 0.05
              + obstacle_avoidance_reward * 0.3
              + fitness_score * 0.4)

    individual_reward = {
        "distance_reward": distance_reward,
        "stability_reward": stability_reward,
        "smoothness_reward": smoothness_reward,
        "obstacle_avoidance_reward": obstacle_avoidance_reward,
        "fitness_score": fitness_score
    }

    return reward, individual_reward