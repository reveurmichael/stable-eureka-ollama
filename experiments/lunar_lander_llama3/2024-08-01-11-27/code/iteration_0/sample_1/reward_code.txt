def compute_reward(self, state, m_power, s_power, terminated):
    if terminated:
        # If the game has ended or the lander has fallen off the screen, penalize the agent
        return -1.0, {'failure': 1.0}

    reward = 0

    # Encourage the agent to stay close to the center of the screen (i.e., the helipad)
    if state[0] < 0:
        reward -= 0.01 * abs(state[0])
    elif state[0] > 1.0:
        reward -= 0.01 * (state[0] - 1.0)

    # Encourage the agent to stay close to the center of the screen in the y-axis
    if state[1] < 0:
        reward -= 0.005 * abs(state[1])
    elif state[1] > 1.0:
        reward -= 0.005 * (state[1] - 1.0)

    # Encourage the agent to maintain a high z-velocity
    if vel.z < 0.5:
        reward += 0.02

    # Penalize the agent for using too much main engine power
    reward -= m_power * 0.01

    # Penalize the agent for using too much side engine power
    reward -= s_power * 0.005

    return reward, {'main_engine': -m_power, 'side_engine': -s_power}