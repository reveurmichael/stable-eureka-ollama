def compute_reward(self, state, m_power, s_power, terminated):
    # Define a basic reward structure:
    #   1. Encourage the agent to reach the helipad (positive reward)
    #   2. Penalize the agent for falling off the edge or crashing (negative reward)
    #   3. Reward the agent for using main engines effectively (more thrust means better)

    reward = 0.0

    # Reach the helipad (positive reward)
    if state[1] > 0:  # y-coordinate above the helipad
        reward += 10.0 * state[1]

    # Penalties for falling off or crashing
    if terminated:
        reward -= 100.0

    # Main engine thrust reward
    if m_power > 0:
        reward += 5.0 * m_power

    return reward, {'main_engine_thrust': m_power}