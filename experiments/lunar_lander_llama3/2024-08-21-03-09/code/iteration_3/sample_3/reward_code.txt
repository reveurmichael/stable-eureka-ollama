def compute_reward(self, state, m_power, s_power, terminated):
    # Define base rewards for main engine, side engines, and other factors (e.g., orientation)
    reward = 0.0

    if not terminated:
        # Main engine reward based on distance traveled or speed
        reward += m_power * np.clip(state[0], -1.0, 1.0)  # position-based reward

        # Side engine reward based on orientation and movement
        reward += s_power * np.cos(state[4])  # orientation-based reward

        # Add other rewards or penalties as needed (e.g., for crashes or low altitude)

    if terminated:
        # Penalty for terminating the episode early
        reward -= 10.0

    individual_reward = {'fitness_score': self.compute_fitness_score(state, m_power, s_power, terminated)}
    return reward, individual_reward