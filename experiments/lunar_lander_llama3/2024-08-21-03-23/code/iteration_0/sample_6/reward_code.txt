def compute_reward(state, m_power, s_power, terminated):
    # Define constants
    LANDING_REWARD = 10.0
    FUEL_PENALTY = -0.1
    ORIENTATION_PENALTY = -0.05

    # Check if the landing is successful (helipad contact)
    helipad_contact = state[6] + state[7] > 0.5

    # Calculate the reward based on the state and actions
    if terminated:
        if helipad_contact:  # Successful landing
            return LANDING_REWARD, {}
        else:  # Crash or failure to land
            return -100.0, {'failure': True}
    else:
        # Encourage proper orientation (close to zero)
        angle_error = abs(state[4])
        if angle_error > 20.0:
            return FUEL_PENALTY + ORIENTATION_PENALTY, {'orientation_error': angle_error}

        # Reward for not using too much fuel
        m_fuel_penalty = -m_power * 0.1

        # Reward for proper orientation and minimal fuel usage
        s_orientation_reward = np.cos(state[4]) * 10.0

        return (s_orientation_reward + LANDING_REWARD) + m_fuel_penalty, {'orientation_error': angle_error}