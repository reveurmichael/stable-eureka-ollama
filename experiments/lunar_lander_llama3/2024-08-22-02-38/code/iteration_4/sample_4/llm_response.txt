```
def compute_reward(self, state, m_power, s_power, terminated):
    if terminated:
        return -1.0, {'m_power': m_power, 's_power': s_power}

    # Reward for moving forward
    forward_reward = 0.0
    if abs(state[0]) < 1.0: 
        forward_reward = (state[0] + 1.0) / 2.0

    # Penalty for orientation difference from the target angle
    orientational_reward = 1.0 - np.abs(state[4])

    # Reward for moving up
    height_reward = state[1]

    # Penalty for velocity differences
    vel_penalty = (np.abs(state[2]) + np.abs(state[3])) / 100.0

    return forward_reward + orientational_reward + height_reward - vel_penalty, {'m_power': m_power, 's_power': s_power}
```