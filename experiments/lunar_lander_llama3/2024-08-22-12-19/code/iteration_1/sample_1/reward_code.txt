def compute_reward(self, state, action, next_state, terminated):
    # Unpack state variables
    x, y, vx, vy, angle, angular_velocity, left_leg, right_leg = state

    # Height reward: keep the lander at a reasonable height
    height_penalty = -(y - self.helipad_y) ** 2
    height_penalty = np.tanh(height_penalty / 5.0)

    # Velocity penalty: discourage high velocities
    velocity_penalty = -(np.abs(vx) + np.abs(vy)) ** 3
    velocity_penalty = np.tanh(velocity_penalty / 1.5)

    # Fuel efficiency reward: penalize using the main engine at certain times
    fuel_penalty = -0.2 if action == 2 and abs(vx) > 5 else 0

    # Landing reward: bonus for successful landing
    landing_reward = 0
    if left_leg and right_leg:
        landing_reward = 50 if abs(x) < 0.1 and abs(y) < 0.1 else 10

    # Total reward: a weighted sum of all components
    reward = (height_penalty + 0.7 * velocity_penalty - fuel_penalty + landing_reward)

    # Apply a penalty if the episode is terminated (crash or out of bounds)
    if terminated and not (left_leg and right_leg):
        reward -= 50

    individual_reward = {
        "height_penalty": height_penalty,
        "velocity_penalty": velocity_penalty,
        "fuel_penalty": fuel_penalty,
        "landing_reward": landing_reward,
    }

    return reward, individual_reward