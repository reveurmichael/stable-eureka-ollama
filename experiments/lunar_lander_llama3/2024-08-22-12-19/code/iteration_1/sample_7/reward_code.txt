def compute_reward(self, state, action, next_state, terminated):
    # Unpack state variables
    x, y, vx, vy, angle, angular_velocity, left_leg, right_leg = state

    # Distance-based reward: incentivize moving towards the landing pad
    distance_reward = -np.sqrt(x**2 + y**2) * 1000.0
    
    # Height reward: keep the lander at a reasonable height
    height_penalty = -(y - self.helipad_y) ** 2 / 10.0
    height_penalty = np.tanh(height_penalty)
    
    # Fuel efficiency reward: penalize using the main engine
    fuel_penalty = -1 if action == 2 else 0
    
    # Landing reward: bonus for successful landing
    landing_reward = 100 if left_leg and right_leg else 10
    
    # Total reward: a weighted sum of all components
    reward = (distance_reward
              + 0.5 * height_penalty
              + 0.01 * fuel_penalty
              + landing_reward)
    
    # Apply a penalty if the episode is terminated (crash or out of bounds)
    if terminated and not (left_leg and right_leg):
        reward -= 100
    
    individual_reward = {
        "distance_reward": distance_reward,
        "height_penalty": height_penalty,
        "fuel_penalty": fuel_penalty,
        "landing_reward": landing_reward,
    }
    
    return reward, individual_reward