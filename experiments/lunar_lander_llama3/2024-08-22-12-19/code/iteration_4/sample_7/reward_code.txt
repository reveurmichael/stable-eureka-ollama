def compute_reward(self, state, action, next_state, terminated):
    # Unpack state variables
    x, y, vx, vy, angle, angular_velocity, left_leg, right_leg = state
    
    # Distance-based reward: incentivize moving towards the landing pad (scaled down)
    distance_reward = -np.sqrt(x**2 + y**2) / 500.0
    
    # Height reward: keep the lander at a reasonable height (modified to balance with velocity penalty)
    height_penalty = -(y - self.helipad_y) ** 2 * 0.3
    
    # Velocity penalty: discourage high velocities (reduced magnitude)
    velocity_penalty = -(np.abs(vx) + np.abs(vy)) ** 2 * 0.1
    
    # Fuel efficiency reward: penalize using the main engine (increased magnitude to make it more impactful)
    fuel_penalty = -5 if action == 2 else 0
    
    # Landing reward: bonus for successful landing (maintained magnitude)
    landing_reward = 0
    if left_leg and right_leg:
        landing_reward = 100 if abs(x) < 0.1 and abs(y) < 0.1 else 10
    
    # Total reward: a weighted sum of all components
    reward = distance_reward + height_penalty + velocity_penalty - fuel_penalty + landing_reward
    
    # Apply a penalty if the episode is terminated (crash or out of bounds)
    if terminated and not (left_leg and right_leg):
        reward -= 100
    
    individual_reward = {
        "distance_reward": distance_reward,
        "height_penalty": height_penalty,
        "velocity_penalty": velocity_penalty,
        "fuel_penalty": fuel_penalty,
        "landing_reward": landing_reward,
    }
    
    return reward, individual_reward