def compute_reward(self, state, m_power, s_power, terminated):
    # Define a base reward that depends on the position of the lander
    base_reward = -abs(state[0])  # penalize being far from the origin

    # If the lander is terminated (game over or too far away), set the reward to a negative value
    if terminated:
        return -100.0, {}

    # Apply rewards based on the main engine power and side engine power
    if m_power > 0.5:  # positive reward for using the main engine
        base_reward += 10.0
    else:
        base_reward -= 5.0  # penalty for not using the main engine

    if s_power > 0.5:  # positive reward for using the side engines
        base_reward += 5.0
    else:
        base_reward -= 2.5  # penalty for not using the side engines

    return base_reward, {}