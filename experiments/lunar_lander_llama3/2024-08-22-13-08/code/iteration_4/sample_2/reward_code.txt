def compute_reward(self, state, m_power, s_power, terminated):
    # Define the reward structure
    R = 0.0

    # Reward for reaching the helipad ( goal )
    if abs(state[1]) < LEG_DOWN / SCALE:  # Lander is near the helipad
        R += 10.0  # Big reward for reaching the helipad

    # Penalty for falling or crashing
    if terminated:
        R -= 100.0  # High penalty for game over

    # Reward for maintaining a safe distance from the ground ( altitude )
    if abs(state[1]) < LEG_DOWN / SCALE:  # Lander is near the helipad
        R += 2.0 * state[1]  # Linear reward for altitude

    # Penalty for using too much main engine power
    R -= m_power * 10.0  # High penalty for excessive main engine use

    # Reward for using side engines effectively ( orientation )
    if s_power > 0:
        R += s_power * 5.0  # Linear reward for side engine usage

    return R, individual_reward